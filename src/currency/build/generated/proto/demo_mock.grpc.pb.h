// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo.proto

#ifndef GRPC_MOCK_demo_2eproto__INCLUDED
#define GRPC_MOCK_demo_2eproto__INCLUDED

#include "demo.pb.h"
#include "demo.grpc.pb.h"

#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/sync_stream.h>
#include <gmock/gmock.h>
namespace oteldemo {

class MockCartServiceStub : public CartService::StubInterface {
 public:
  MOCK_METHOD3(AddItem, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::AddItemRequest& request, ::oteldemo::Empty* response));
  MOCK_METHOD3(AsyncAddItemRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Empty>*(::grpc::ClientContext* context, const ::oteldemo::AddItemRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncAddItemRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Empty>*(::grpc::ClientContext* context, const ::oteldemo::AddItemRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetCart, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::GetCartRequest& request, ::oteldemo::Cart* response));
  MOCK_METHOD3(AsyncGetCartRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Cart>*(::grpc::ClientContext* context, const ::oteldemo::GetCartRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetCartRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Cart>*(::grpc::ClientContext* context, const ::oteldemo::GetCartRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EmptyCart, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::EmptyCartRequest& request, ::oteldemo::Empty* response));
  MOCK_METHOD3(AsyncEmptyCartRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Empty>*(::grpc::ClientContext* context, const ::oteldemo::EmptyCartRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEmptyCartRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Empty>*(::grpc::ClientContext* context, const ::oteldemo::EmptyCartRequest& request, ::grpc::CompletionQueue* cq));
};

class MockRecommendationServiceStub : public RecommendationService::StubInterface {
 public:
  MOCK_METHOD3(ListRecommendations, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::ListRecommendationsRequest& request, ::oteldemo::ListRecommendationsResponse* response));
  MOCK_METHOD3(AsyncListRecommendationsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ListRecommendationsResponse>*(::grpc::ClientContext* context, const ::oteldemo::ListRecommendationsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListRecommendationsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ListRecommendationsResponse>*(::grpc::ClientContext* context, const ::oteldemo::ListRecommendationsRequest& request, ::grpc::CompletionQueue* cq));
};

class MockProductCatalogServiceStub : public ProductCatalogService::StubInterface {
 public:
  MOCK_METHOD3(ListProducts, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::Empty& request, ::oteldemo::ListProductsResponse* response));
  MOCK_METHOD3(AsyncListProductsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ListProductsResponse>*(::grpc::ClientContext* context, const ::oteldemo::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListProductsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ListProductsResponse>*(::grpc::ClientContext* context, const ::oteldemo::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetProduct, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::GetProductRequest& request, ::oteldemo::Product* response));
  MOCK_METHOD3(AsyncGetProductRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Product>*(::grpc::ClientContext* context, const ::oteldemo::GetProductRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetProductRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Product>*(::grpc::ClientContext* context, const ::oteldemo::GetProductRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SearchProducts, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::SearchProductsRequest& request, ::oteldemo::SearchProductsResponse* response));
  MOCK_METHOD3(AsyncSearchProductsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::SearchProductsResponse>*(::grpc::ClientContext* context, const ::oteldemo::SearchProductsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSearchProductsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::SearchProductsResponse>*(::grpc::ClientContext* context, const ::oteldemo::SearchProductsRequest& request, ::grpc::CompletionQueue* cq));
};

class MockProductReviewServiceStub : public ProductReviewService::StubInterface {
 public:
  MOCK_METHOD3(GetProductReviews, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::GetProductReviewsRequest& request, ::oteldemo::GetProductReviewsResponse* response));
  MOCK_METHOD3(AsyncGetProductReviewsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetProductReviewsResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetProductReviewsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetProductReviewsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetProductReviewsResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetProductReviewsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetProductReviewSummary, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::GetProductReviewSummaryRequest& request, ::oteldemo::GetProductReviewSummaryResponse* response));
  MOCK_METHOD3(AsyncGetProductReviewSummaryRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetProductReviewSummaryResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetProductReviewSummaryRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetProductReviewSummaryRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetProductReviewSummaryResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetProductReviewSummaryRequest& request, ::grpc::CompletionQueue* cq));
};

class MockShippingServiceStub : public ShippingService::StubInterface {
 public:
  MOCK_METHOD3(GetQuote, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::GetQuoteRequest& request, ::oteldemo::GetQuoteResponse* response));
  MOCK_METHOD3(AsyncGetQuoteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetQuoteResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetQuoteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetQuoteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetQuoteResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetQuoteRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ShipOrder, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::ShipOrderRequest& request, ::oteldemo::ShipOrderResponse* response));
  MOCK_METHOD3(AsyncShipOrderRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ShipOrderResponse>*(::grpc::ClientContext* context, const ::oteldemo::ShipOrderRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncShipOrderRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ShipOrderResponse>*(::grpc::ClientContext* context, const ::oteldemo::ShipOrderRequest& request, ::grpc::CompletionQueue* cq));
};

class MockCurrencyServiceStub : public CurrencyService::StubInterface {
 public:
  MOCK_METHOD3(GetSupportedCurrencies, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::Empty& request, ::oteldemo::GetSupportedCurrenciesResponse* response));
  MOCK_METHOD3(AsyncGetSupportedCurrenciesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetSupportedCurrenciesResponse>*(::grpc::ClientContext* context, const ::oteldemo::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetSupportedCurrenciesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetSupportedCurrenciesResponse>*(::grpc::ClientContext* context, const ::oteldemo::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Convert, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::CurrencyConversionRequest& request, ::oteldemo::Money* response));
  MOCK_METHOD3(AsyncConvertRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Money>*(::grpc::ClientContext* context, const ::oteldemo::CurrencyConversionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncConvertRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Money>*(::grpc::ClientContext* context, const ::oteldemo::CurrencyConversionRequest& request, ::grpc::CompletionQueue* cq));
};

class MockPaymentServiceStub : public PaymentService::StubInterface {
 public:
  MOCK_METHOD3(Charge, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::ChargeRequest& request, ::oteldemo::ChargeResponse* response));
  MOCK_METHOD3(AsyncChargeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ChargeResponse>*(::grpc::ClientContext* context, const ::oteldemo::ChargeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncChargeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ChargeResponse>*(::grpc::ClientContext* context, const ::oteldemo::ChargeRequest& request, ::grpc::CompletionQueue* cq));
};

class MockEmailServiceStub : public EmailService::StubInterface {
 public:
  MOCK_METHOD3(SendOrderConfirmation, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::SendOrderConfirmationRequest& request, ::oteldemo::Empty* response));
  MOCK_METHOD3(AsyncSendOrderConfirmationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Empty>*(::grpc::ClientContext* context, const ::oteldemo::SendOrderConfirmationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendOrderConfirmationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::Empty>*(::grpc::ClientContext* context, const ::oteldemo::SendOrderConfirmationRequest& request, ::grpc::CompletionQueue* cq));
};

class MockCheckoutServiceStub : public CheckoutService::StubInterface {
 public:
  MOCK_METHOD3(PlaceOrder, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::PlaceOrderRequest& request, ::oteldemo::PlaceOrderResponse* response));
  MOCK_METHOD3(AsyncPlaceOrderRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::PlaceOrderResponse>*(::grpc::ClientContext* context, const ::oteldemo::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPlaceOrderRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::PlaceOrderResponse>*(::grpc::ClientContext* context, const ::oteldemo::PlaceOrderRequest& request, ::grpc::CompletionQueue* cq));
};

class MockAdServiceStub : public AdService::StubInterface {
 public:
  MOCK_METHOD3(GetAds, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::AdRequest& request, ::oteldemo::AdResponse* response));
  MOCK_METHOD3(AsyncGetAdsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::AdResponse>*(::grpc::ClientContext* context, const ::oteldemo::AdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetAdsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::AdResponse>*(::grpc::ClientContext* context, const ::oteldemo::AdRequest& request, ::grpc::CompletionQueue* cq));
};

class MockFeatureFlagServiceStub : public FeatureFlagService::StubInterface {
 public:
  MOCK_METHOD3(GetFlag, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::GetFlagRequest& request, ::oteldemo::GetFlagResponse* response));
  MOCK_METHOD3(AsyncGetFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::GetFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::GetFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(CreateFlag, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::CreateFlagRequest& request, ::oteldemo::CreateFlagResponse* response));
  MOCK_METHOD3(AsyncCreateFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::CreateFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::CreateFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::CreateFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::CreateFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(UpdateFlag, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::UpdateFlagRequest& request, ::oteldemo::UpdateFlagResponse* response));
  MOCK_METHOD3(AsyncUpdateFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::UpdateFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::UpdateFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUpdateFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::UpdateFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::UpdateFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ListFlags, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::ListFlagsRequest& request, ::oteldemo::ListFlagsResponse* response));
  MOCK_METHOD3(AsyncListFlagsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ListFlagsResponse>*(::grpc::ClientContext* context, const ::oteldemo::ListFlagsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncListFlagsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::ListFlagsResponse>*(::grpc::ClientContext* context, const ::oteldemo::ListFlagsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(DeleteFlag, ::grpc::Status(::grpc::ClientContext* context, const ::oteldemo::DeleteFlagRequest& request, ::oteldemo::DeleteFlagResponse* response));
  MOCK_METHOD3(AsyncDeleteFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::DeleteFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::DeleteFlagRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncDeleteFlagRaw, ::grpc::ClientAsyncResponseReaderInterface< ::oteldemo::DeleteFlagResponse>*(::grpc::ClientContext* context, const ::oteldemo::DeleteFlagRequest& request, ::grpc::CompletionQueue* cq));
};

}  // namespace oteldemo


#endif  // GRPC_MOCK_demo_2eproto__INCLUDED
