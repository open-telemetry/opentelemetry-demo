// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: demo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - oteldemo.CartService

/// Namespace containing generated types for the "oteldemo.CartService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_CartService {
    /// Service descriptor for the "oteldemo.CartService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CartService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "AddItem" metadata.
        internal enum AddItem {
            /// Request type for "AddItem".
            internal typealias Input = Oteldemo_AddItemRequest
            /// Response type for "AddItem".
            internal typealias Output = Oteldemo_Empty
            /// Descriptor for "AddItem".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CartService"),
                method: "AddItem"
            )
        }
        /// Namespace for "GetCart" metadata.
        internal enum GetCart {
            /// Request type for "GetCart".
            internal typealias Input = Oteldemo_GetCartRequest
            /// Response type for "GetCart".
            internal typealias Output = Oteldemo_Cart
            /// Descriptor for "GetCart".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CartService"),
                method: "GetCart"
            )
        }
        /// Namespace for "EmptyCart" metadata.
        internal enum EmptyCart {
            /// Request type for "EmptyCart".
            internal typealias Input = Oteldemo_EmptyCartRequest
            /// Response type for "EmptyCart".
            internal typealias Output = Oteldemo_Empty
            /// Descriptor for "EmptyCart".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CartService"),
                method: "EmptyCart"
            )
        }
        /// Descriptors for all methods in the "oteldemo.CartService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            AddItem.descriptor,
            GetCart.descriptor,
            EmptyCart.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.CartService" service.
    internal static let oteldemo_CartService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CartService")
}

// MARK: oteldemo.CartService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CartService {
    /// Streaming variant of the service protocol for the "oteldemo.CartService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "AddItem" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_AddItemRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_Empty` messages.
        func addItem(
            request: GRPCCore.StreamingServerRequest<Oteldemo_AddItemRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Empty>

        /// Handle the "GetCart" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_GetCartRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_Cart` messages.
        func getCart(
            request: GRPCCore.StreamingServerRequest<Oteldemo_GetCartRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Cart>

        /// Handle the "EmptyCart" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_EmptyCartRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_Empty` messages.
        func emptyCart(
            request: GRPCCore.StreamingServerRequest<Oteldemo_EmptyCartRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Empty>
    }

    /// Service protocol for the "oteldemo.CartService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_CartService.StreamingServiceProtocol {
        /// Handle the "AddItem" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_AddItemRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_Empty` message.
        func addItem(
            request: GRPCCore.ServerRequest<Oteldemo_AddItemRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_Empty>

        /// Handle the "GetCart" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_GetCartRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_Cart` message.
        func getCart(
            request: GRPCCore.ServerRequest<Oteldemo_GetCartRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_Cart>

        /// Handle the "EmptyCart" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_EmptyCartRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_Empty` message.
        func emptyCart(
            request: GRPCCore.ServerRequest<Oteldemo_EmptyCartRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_Empty>
    }

    /// Simple service protocol for the "oteldemo.CartService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_CartService.ServiceProtocol {
        /// Handle the "AddItem" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_AddItemRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_Empty` to respond with.
        func addItem(
            request: Oteldemo_AddItemRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_Empty

        /// Handle the "GetCart" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_GetCartRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_Cart` to respond with.
        func getCart(
            request: Oteldemo_GetCartRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_Cart

        /// Handle the "EmptyCart" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_EmptyCartRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_Empty` to respond with.
        func emptyCart(
            request: Oteldemo_EmptyCartRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CartService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_CartService.Method.AddItem.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_AddItemRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_Empty>(),
            handler: { request, context in
                try await self.addItem(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_CartService.Method.GetCart.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_GetCartRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_Cart>(),
            handler: { request, context in
                try await self.getCart(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_CartService.Method.EmptyCart.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_EmptyCartRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_Empty>(),
            handler: { request, context in
                try await self.emptyCart(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CartService.ServiceProtocol {
    internal func addItem(
        request: GRPCCore.StreamingServerRequest<Oteldemo_AddItemRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Empty> {
        let response = try await self.addItem(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getCart(
        request: GRPCCore.StreamingServerRequest<Oteldemo_GetCartRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Cart> {
        let response = try await self.getCart(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func emptyCart(
        request: GRPCCore.StreamingServerRequest<Oteldemo_EmptyCartRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Empty> {
        let response = try await self.emptyCart(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CartService.SimpleServiceProtocol {
    internal func addItem(
        request: GRPCCore.ServerRequest<Oteldemo_AddItemRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_Empty> {
        return GRPCCore.ServerResponse<Oteldemo_Empty>(
            message: try await self.addItem(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getCart(
        request: GRPCCore.ServerRequest<Oteldemo_GetCartRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_Cart> {
        return GRPCCore.ServerResponse<Oteldemo_Cart>(
            message: try await self.getCart(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func emptyCart(
        request: GRPCCore.ServerRequest<Oteldemo_EmptyCartRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_Empty> {
        return GRPCCore.ServerResponse<Oteldemo_Empty>(
            message: try await self.emptyCart(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.RecommendationService

/// Namespace containing generated types for the "oteldemo.RecommendationService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_RecommendationService {
    /// Service descriptor for the "oteldemo.RecommendationService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.RecommendationService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "ListRecommendations" metadata.
        internal enum ListRecommendations {
            /// Request type for "ListRecommendations".
            internal typealias Input = Oteldemo_ListRecommendationsRequest
            /// Response type for "ListRecommendations".
            internal typealias Output = Oteldemo_ListRecommendationsResponse
            /// Descriptor for "ListRecommendations".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.RecommendationService"),
                method: "ListRecommendations"
            )
        }
        /// Descriptors for all methods in the "oteldemo.RecommendationService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            ListRecommendations.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.RecommendationService" service.
    internal static let oteldemo_RecommendationService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.RecommendationService")
}

// MARK: oteldemo.RecommendationService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_RecommendationService {
    /// Streaming variant of the service protocol for the "oteldemo.RecommendationService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ListRecommendations" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_ListRecommendationsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_ListRecommendationsResponse` messages.
        func listRecommendations(
            request: GRPCCore.StreamingServerRequest<Oteldemo_ListRecommendationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ListRecommendationsResponse>
    }

    /// Service protocol for the "oteldemo.RecommendationService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_RecommendationService.StreamingServiceProtocol {
        /// Handle the "ListRecommendations" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_ListRecommendationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_ListRecommendationsResponse` message.
        func listRecommendations(
            request: GRPCCore.ServerRequest<Oteldemo_ListRecommendationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_ListRecommendationsResponse>
    }

    /// Simple service protocol for the "oteldemo.RecommendationService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_RecommendationService.ServiceProtocol {
        /// Handle the "ListRecommendations" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_ListRecommendationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_ListRecommendationsResponse` to respond with.
        func listRecommendations(
            request: Oteldemo_ListRecommendationsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_ListRecommendationsResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_RecommendationService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_RecommendationService.Method.ListRecommendations.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_ListRecommendationsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_ListRecommendationsResponse>(),
            handler: { request, context in
                try await self.listRecommendations(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_RecommendationService.ServiceProtocol {
    internal func listRecommendations(
        request: GRPCCore.StreamingServerRequest<Oteldemo_ListRecommendationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ListRecommendationsResponse> {
        let response = try await self.listRecommendations(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_RecommendationService.SimpleServiceProtocol {
    internal func listRecommendations(
        request: GRPCCore.ServerRequest<Oteldemo_ListRecommendationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_ListRecommendationsResponse> {
        return GRPCCore.ServerResponse<Oteldemo_ListRecommendationsResponse>(
            message: try await self.listRecommendations(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.ProductCatalogService

/// Namespace containing generated types for the "oteldemo.ProductCatalogService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_ProductCatalogService {
    /// Service descriptor for the "oteldemo.ProductCatalogService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ProductCatalogService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "ListProducts" metadata.
        internal enum ListProducts {
            /// Request type for "ListProducts".
            internal typealias Input = Oteldemo_Empty
            /// Response type for "ListProducts".
            internal typealias Output = Oteldemo_ListProductsResponse
            /// Descriptor for "ListProducts".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ProductCatalogService"),
                method: "ListProducts"
            )
        }
        /// Namespace for "GetProduct" metadata.
        internal enum GetProduct {
            /// Request type for "GetProduct".
            internal typealias Input = Oteldemo_GetProductRequest
            /// Response type for "GetProduct".
            internal typealias Output = Oteldemo_Product
            /// Descriptor for "GetProduct".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ProductCatalogService"),
                method: "GetProduct"
            )
        }
        /// Namespace for "SearchProducts" metadata.
        internal enum SearchProducts {
            /// Request type for "SearchProducts".
            internal typealias Input = Oteldemo_SearchProductsRequest
            /// Response type for "SearchProducts".
            internal typealias Output = Oteldemo_SearchProductsResponse
            /// Descriptor for "SearchProducts".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ProductCatalogService"),
                method: "SearchProducts"
            )
        }
        /// Descriptors for all methods in the "oteldemo.ProductCatalogService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            ListProducts.descriptor,
            GetProduct.descriptor,
            SearchProducts.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.ProductCatalogService" service.
    internal static let oteldemo_ProductCatalogService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ProductCatalogService")
}

// MARK: oteldemo.ProductCatalogService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ProductCatalogService {
    /// Streaming variant of the service protocol for the "oteldemo.ProductCatalogService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ListProducts" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_ListProductsResponse` messages.
        func listProducts(
            request: GRPCCore.StreamingServerRequest<Oteldemo_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ListProductsResponse>

        /// Handle the "GetProduct" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_GetProductRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_Product` messages.
        func getProduct(
            request: GRPCCore.StreamingServerRequest<Oteldemo_GetProductRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Product>

        /// Handle the "SearchProducts" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_SearchProductsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_SearchProductsResponse` messages.
        func searchProducts(
            request: GRPCCore.StreamingServerRequest<Oteldemo_SearchProductsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_SearchProductsResponse>
    }

    /// Service protocol for the "oteldemo.ProductCatalogService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_ProductCatalogService.StreamingServiceProtocol {
        /// Handle the "ListProducts" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_ListProductsResponse` message.
        func listProducts(
            request: GRPCCore.ServerRequest<Oteldemo_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_ListProductsResponse>

        /// Handle the "GetProduct" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_GetProductRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_Product` message.
        func getProduct(
            request: GRPCCore.ServerRequest<Oteldemo_GetProductRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_Product>

        /// Handle the "SearchProducts" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_SearchProductsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_SearchProductsResponse` message.
        func searchProducts(
            request: GRPCCore.ServerRequest<Oteldemo_SearchProductsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_SearchProductsResponse>
    }

    /// Simple service protocol for the "oteldemo.ProductCatalogService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_ProductCatalogService.ServiceProtocol {
        /// Handle the "ListProducts" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_ListProductsResponse` to respond with.
        func listProducts(
            request: Oteldemo_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_ListProductsResponse

        /// Handle the "GetProduct" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_GetProductRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_Product` to respond with.
        func getProduct(
            request: Oteldemo_GetProductRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_Product

        /// Handle the "SearchProducts" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_SearchProductsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_SearchProductsResponse` to respond with.
        func searchProducts(
            request: Oteldemo_SearchProductsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_SearchProductsResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ProductCatalogService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_ProductCatalogService.Method.ListProducts.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_ListProductsResponse>(),
            handler: { request, context in
                try await self.listProducts(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_ProductCatalogService.Method.GetProduct.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_GetProductRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_Product>(),
            handler: { request, context in
                try await self.getProduct(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_ProductCatalogService.Method.SearchProducts.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_SearchProductsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_SearchProductsResponse>(),
            handler: { request, context in
                try await self.searchProducts(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ProductCatalogService.ServiceProtocol {
    internal func listProducts(
        request: GRPCCore.StreamingServerRequest<Oteldemo_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ListProductsResponse> {
        let response = try await self.listProducts(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getProduct(
        request: GRPCCore.StreamingServerRequest<Oteldemo_GetProductRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Product> {
        let response = try await self.getProduct(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func searchProducts(
        request: GRPCCore.StreamingServerRequest<Oteldemo_SearchProductsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_SearchProductsResponse> {
        let response = try await self.searchProducts(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ProductCatalogService.SimpleServiceProtocol {
    internal func listProducts(
        request: GRPCCore.ServerRequest<Oteldemo_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_ListProductsResponse> {
        return GRPCCore.ServerResponse<Oteldemo_ListProductsResponse>(
            message: try await self.listProducts(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getProduct(
        request: GRPCCore.ServerRequest<Oteldemo_GetProductRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_Product> {
        return GRPCCore.ServerResponse<Oteldemo_Product>(
            message: try await self.getProduct(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func searchProducts(
        request: GRPCCore.ServerRequest<Oteldemo_SearchProductsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_SearchProductsResponse> {
        return GRPCCore.ServerResponse<Oteldemo_SearchProductsResponse>(
            message: try await self.searchProducts(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.ShippingService

/// Namespace containing generated types for the "oteldemo.ShippingService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_ShippingService {
    /// Service descriptor for the "oteldemo.ShippingService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ShippingService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetQuote" metadata.
        internal enum GetQuote {
            /// Request type for "GetQuote".
            internal typealias Input = Oteldemo_GetQuoteRequest
            /// Response type for "GetQuote".
            internal typealias Output = Oteldemo_GetQuoteResponse
            /// Descriptor for "GetQuote".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ShippingService"),
                method: "GetQuote"
            )
        }
        /// Namespace for "ShipOrder" metadata.
        internal enum ShipOrder {
            /// Request type for "ShipOrder".
            internal typealias Input = Oteldemo_ShipOrderRequest
            /// Response type for "ShipOrder".
            internal typealias Output = Oteldemo_ShipOrderResponse
            /// Descriptor for "ShipOrder".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ShippingService"),
                method: "ShipOrder"
            )
        }
        /// Descriptors for all methods in the "oteldemo.ShippingService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetQuote.descriptor,
            ShipOrder.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.ShippingService" service.
    internal static let oteldemo_ShippingService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.ShippingService")
}

// MARK: oteldemo.ShippingService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ShippingService {
    /// Streaming variant of the service protocol for the "oteldemo.ShippingService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "GetQuote" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_GetQuoteRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_GetQuoteResponse` messages.
        func getQuote(
            request: GRPCCore.StreamingServerRequest<Oteldemo_GetQuoteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_GetQuoteResponse>

        /// Handle the "ShipOrder" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_ShipOrderRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_ShipOrderResponse` messages.
        func shipOrder(
            request: GRPCCore.StreamingServerRequest<Oteldemo_ShipOrderRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ShipOrderResponse>
    }

    /// Service protocol for the "oteldemo.ShippingService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_ShippingService.StreamingServiceProtocol {
        /// Handle the "GetQuote" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_GetQuoteRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_GetQuoteResponse` message.
        func getQuote(
            request: GRPCCore.ServerRequest<Oteldemo_GetQuoteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_GetQuoteResponse>

        /// Handle the "ShipOrder" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_ShipOrderRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_ShipOrderResponse` message.
        func shipOrder(
            request: GRPCCore.ServerRequest<Oteldemo_ShipOrderRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_ShipOrderResponse>
    }

    /// Simple service protocol for the "oteldemo.ShippingService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_ShippingService.ServiceProtocol {
        /// Handle the "GetQuote" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_GetQuoteRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_GetQuoteResponse` to respond with.
        func getQuote(
            request: Oteldemo_GetQuoteRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_GetQuoteResponse

        /// Handle the "ShipOrder" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_ShipOrderRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_ShipOrderResponse` to respond with.
        func shipOrder(
            request: Oteldemo_ShipOrderRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_ShipOrderResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ShippingService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_ShippingService.Method.GetQuote.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_GetQuoteRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_GetQuoteResponse>(),
            handler: { request, context in
                try await self.getQuote(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_ShippingService.Method.ShipOrder.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_ShipOrderRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_ShipOrderResponse>(),
            handler: { request, context in
                try await self.shipOrder(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ShippingService.ServiceProtocol {
    internal func getQuote(
        request: GRPCCore.StreamingServerRequest<Oteldemo_GetQuoteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_GetQuoteResponse> {
        let response = try await self.getQuote(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func shipOrder(
        request: GRPCCore.StreamingServerRequest<Oteldemo_ShipOrderRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ShipOrderResponse> {
        let response = try await self.shipOrder(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_ShippingService.SimpleServiceProtocol {
    internal func getQuote(
        request: GRPCCore.ServerRequest<Oteldemo_GetQuoteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_GetQuoteResponse> {
        return GRPCCore.ServerResponse<Oteldemo_GetQuoteResponse>(
            message: try await self.getQuote(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func shipOrder(
        request: GRPCCore.ServerRequest<Oteldemo_ShipOrderRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_ShipOrderResponse> {
        return GRPCCore.ServerResponse<Oteldemo_ShipOrderResponse>(
            message: try await self.shipOrder(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.CurrencyService

/// Namespace containing generated types for the "oteldemo.CurrencyService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_CurrencyService {
    /// Service descriptor for the "oteldemo.CurrencyService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CurrencyService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetSupportedCurrencies" metadata.
        internal enum GetSupportedCurrencies {
            /// Request type for "GetSupportedCurrencies".
            internal typealias Input = Oteldemo_Empty
            /// Response type for "GetSupportedCurrencies".
            internal typealias Output = Oteldemo_GetSupportedCurrenciesResponse
            /// Descriptor for "GetSupportedCurrencies".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CurrencyService"),
                method: "GetSupportedCurrencies"
            )
        }
        /// Namespace for "Convert" metadata.
        internal enum Convert {
            /// Request type for "Convert".
            internal typealias Input = Oteldemo_CurrencyConversionRequest
            /// Response type for "Convert".
            internal typealias Output = Oteldemo_Money
            /// Descriptor for "Convert".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CurrencyService"),
                method: "Convert"
            )
        }
        /// Descriptors for all methods in the "oteldemo.CurrencyService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetSupportedCurrencies.descriptor,
            Convert.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.CurrencyService" service.
    internal static let oteldemo_CurrencyService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CurrencyService")
}

// MARK: oteldemo.CurrencyService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CurrencyService {
    /// Streaming variant of the service protocol for the "oteldemo.CurrencyService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "GetSupportedCurrencies" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_Empty` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_GetSupportedCurrenciesResponse` messages.
        func getSupportedCurrencies(
            request: GRPCCore.StreamingServerRequest<Oteldemo_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_GetSupportedCurrenciesResponse>

        /// Handle the "Convert" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_CurrencyConversionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_Money` messages.
        func convert(
            request: GRPCCore.StreamingServerRequest<Oteldemo_CurrencyConversionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Money>
    }

    /// Service protocol for the "oteldemo.CurrencyService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_CurrencyService.StreamingServiceProtocol {
        /// Handle the "GetSupportedCurrencies" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_GetSupportedCurrenciesResponse` message.
        func getSupportedCurrencies(
            request: GRPCCore.ServerRequest<Oteldemo_Empty>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_GetSupportedCurrenciesResponse>

        /// Handle the "Convert" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_CurrencyConversionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_Money` message.
        func convert(
            request: GRPCCore.ServerRequest<Oteldemo_CurrencyConversionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_Money>
    }

    /// Simple service protocol for the "oteldemo.CurrencyService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_CurrencyService.ServiceProtocol {
        /// Handle the "GetSupportedCurrencies" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_Empty` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_GetSupportedCurrenciesResponse` to respond with.
        func getSupportedCurrencies(
            request: Oteldemo_Empty,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_GetSupportedCurrenciesResponse

        /// Handle the "Convert" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_CurrencyConversionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_Money` to respond with.
        func convert(
            request: Oteldemo_CurrencyConversionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_Money
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CurrencyService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_CurrencyService.Method.GetSupportedCurrencies.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_Empty>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_GetSupportedCurrenciesResponse>(),
            handler: { request, context in
                try await self.getSupportedCurrencies(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_CurrencyService.Method.Convert.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_CurrencyConversionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_Money>(),
            handler: { request, context in
                try await self.convert(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CurrencyService.ServiceProtocol {
    internal func getSupportedCurrencies(
        request: GRPCCore.StreamingServerRequest<Oteldemo_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_GetSupportedCurrenciesResponse> {
        let response = try await self.getSupportedCurrencies(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func convert(
        request: GRPCCore.StreamingServerRequest<Oteldemo_CurrencyConversionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Money> {
        let response = try await self.convert(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CurrencyService.SimpleServiceProtocol {
    internal func getSupportedCurrencies(
        request: GRPCCore.ServerRequest<Oteldemo_Empty>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_GetSupportedCurrenciesResponse> {
        return GRPCCore.ServerResponse<Oteldemo_GetSupportedCurrenciesResponse>(
            message: try await self.getSupportedCurrencies(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func convert(
        request: GRPCCore.ServerRequest<Oteldemo_CurrencyConversionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_Money> {
        return GRPCCore.ServerResponse<Oteldemo_Money>(
            message: try await self.convert(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.PaymentService

/// Namespace containing generated types for the "oteldemo.PaymentService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_PaymentService {
    /// Service descriptor for the "oteldemo.PaymentService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.PaymentService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Charge" metadata.
        internal enum Charge {
            /// Request type for "Charge".
            internal typealias Input = Oteldemo_ChargeRequest
            /// Response type for "Charge".
            internal typealias Output = Oteldemo_ChargeResponse
            /// Descriptor for "Charge".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.PaymentService"),
                method: "Charge"
            )
        }
        /// Descriptors for all methods in the "oteldemo.PaymentService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Charge.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.PaymentService" service.
    internal static let oteldemo_PaymentService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.PaymentService")
}

// MARK: oteldemo.PaymentService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_PaymentService {
    /// Streaming variant of the service protocol for the "oteldemo.PaymentService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Charge" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_ChargeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_ChargeResponse` messages.
        func charge(
            request: GRPCCore.StreamingServerRequest<Oteldemo_ChargeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ChargeResponse>
    }

    /// Service protocol for the "oteldemo.PaymentService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_PaymentService.StreamingServiceProtocol {
        /// Handle the "Charge" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_ChargeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_ChargeResponse` message.
        func charge(
            request: GRPCCore.ServerRequest<Oteldemo_ChargeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_ChargeResponse>
    }

    /// Simple service protocol for the "oteldemo.PaymentService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_PaymentService.ServiceProtocol {
        /// Handle the "Charge" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_ChargeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_ChargeResponse` to respond with.
        func charge(
            request: Oteldemo_ChargeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_ChargeResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_PaymentService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_PaymentService.Method.Charge.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_ChargeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_ChargeResponse>(),
            handler: { request, context in
                try await self.charge(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_PaymentService.ServiceProtocol {
    internal func charge(
        request: GRPCCore.StreamingServerRequest<Oteldemo_ChargeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ChargeResponse> {
        let response = try await self.charge(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_PaymentService.SimpleServiceProtocol {
    internal func charge(
        request: GRPCCore.ServerRequest<Oteldemo_ChargeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_ChargeResponse> {
        return GRPCCore.ServerResponse<Oteldemo_ChargeResponse>(
            message: try await self.charge(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.EmailService

/// Namespace containing generated types for the "oteldemo.EmailService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_EmailService {
    /// Service descriptor for the "oteldemo.EmailService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.EmailService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "SendOrderConfirmation" metadata.
        internal enum SendOrderConfirmation {
            /// Request type for "SendOrderConfirmation".
            internal typealias Input = Oteldemo_SendOrderConfirmationRequest
            /// Response type for "SendOrderConfirmation".
            internal typealias Output = Oteldemo_Empty
            /// Descriptor for "SendOrderConfirmation".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.EmailService"),
                method: "SendOrderConfirmation"
            )
        }
        /// Descriptors for all methods in the "oteldemo.EmailService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            SendOrderConfirmation.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.EmailService" service.
    internal static let oteldemo_EmailService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.EmailService")
}

// MARK: oteldemo.EmailService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_EmailService {
    /// Streaming variant of the service protocol for the "oteldemo.EmailService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "SendOrderConfirmation" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_SendOrderConfirmationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_Empty` messages.
        func sendOrderConfirmation(
            request: GRPCCore.StreamingServerRequest<Oteldemo_SendOrderConfirmationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Empty>
    }

    /// Service protocol for the "oteldemo.EmailService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_EmailService.StreamingServiceProtocol {
        /// Handle the "SendOrderConfirmation" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_SendOrderConfirmationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_Empty` message.
        func sendOrderConfirmation(
            request: GRPCCore.ServerRequest<Oteldemo_SendOrderConfirmationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_Empty>
    }

    /// Simple service protocol for the "oteldemo.EmailService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_EmailService.ServiceProtocol {
        /// Handle the "SendOrderConfirmation" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_SendOrderConfirmationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_Empty` to respond with.
        func sendOrderConfirmation(
            request: Oteldemo_SendOrderConfirmationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_EmailService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_EmailService.Method.SendOrderConfirmation.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_SendOrderConfirmationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_Empty>(),
            handler: { request, context in
                try await self.sendOrderConfirmation(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_EmailService.ServiceProtocol {
    internal func sendOrderConfirmation(
        request: GRPCCore.StreamingServerRequest<Oteldemo_SendOrderConfirmationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_Empty> {
        let response = try await self.sendOrderConfirmation(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_EmailService.SimpleServiceProtocol {
    internal func sendOrderConfirmation(
        request: GRPCCore.ServerRequest<Oteldemo_SendOrderConfirmationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_Empty> {
        return GRPCCore.ServerResponse<Oteldemo_Empty>(
            message: try await self.sendOrderConfirmation(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.CheckoutService

/// Namespace containing generated types for the "oteldemo.CheckoutService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_CheckoutService {
    /// Service descriptor for the "oteldemo.CheckoutService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CheckoutService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "PlaceOrder" metadata.
        internal enum PlaceOrder {
            /// Request type for "PlaceOrder".
            internal typealias Input = Oteldemo_PlaceOrderRequest
            /// Response type for "PlaceOrder".
            internal typealias Output = Oteldemo_PlaceOrderResponse
            /// Descriptor for "PlaceOrder".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CheckoutService"),
                method: "PlaceOrder"
            )
        }
        /// Descriptors for all methods in the "oteldemo.CheckoutService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            PlaceOrder.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.CheckoutService" service.
    internal static let oteldemo_CheckoutService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.CheckoutService")
}

// MARK: oteldemo.CheckoutService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CheckoutService {
    /// Streaming variant of the service protocol for the "oteldemo.CheckoutService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "PlaceOrder" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_PlaceOrderRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_PlaceOrderResponse` messages.
        func placeOrder(
            request: GRPCCore.StreamingServerRequest<Oteldemo_PlaceOrderRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_PlaceOrderResponse>
    }

    /// Service protocol for the "oteldemo.CheckoutService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_CheckoutService.StreamingServiceProtocol {
        /// Handle the "PlaceOrder" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_PlaceOrderRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_PlaceOrderResponse` message.
        func placeOrder(
            request: GRPCCore.ServerRequest<Oteldemo_PlaceOrderRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_PlaceOrderResponse>
    }

    /// Simple service protocol for the "oteldemo.CheckoutService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_CheckoutService.ServiceProtocol {
        /// Handle the "PlaceOrder" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_PlaceOrderRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_PlaceOrderResponse` to respond with.
        func placeOrder(
            request: Oteldemo_PlaceOrderRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_PlaceOrderResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CheckoutService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_CheckoutService.Method.PlaceOrder.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_PlaceOrderRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_PlaceOrderResponse>(),
            handler: { request, context in
                try await self.placeOrder(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CheckoutService.ServiceProtocol {
    internal func placeOrder(
        request: GRPCCore.StreamingServerRequest<Oteldemo_PlaceOrderRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_PlaceOrderResponse> {
        let response = try await self.placeOrder(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_CheckoutService.SimpleServiceProtocol {
    internal func placeOrder(
        request: GRPCCore.ServerRequest<Oteldemo_PlaceOrderRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_PlaceOrderResponse> {
        return GRPCCore.ServerResponse<Oteldemo_PlaceOrderResponse>(
            message: try await self.placeOrder(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.AdService

/// Namespace containing generated types for the "oteldemo.AdService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_AdService {
    /// Service descriptor for the "oteldemo.AdService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.AdService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetAds" metadata.
        internal enum GetAds {
            /// Request type for "GetAds".
            internal typealias Input = Oteldemo_AdRequest
            /// Response type for "GetAds".
            internal typealias Output = Oteldemo_AdResponse
            /// Descriptor for "GetAds".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.AdService"),
                method: "GetAds"
            )
        }
        /// Descriptors for all methods in the "oteldemo.AdService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetAds.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.AdService" service.
    internal static let oteldemo_AdService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.AdService")
}

// MARK: oteldemo.AdService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_AdService {
    /// Streaming variant of the service protocol for the "oteldemo.AdService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "GetAds" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_AdRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_AdResponse` messages.
        func getAds(
            request: GRPCCore.StreamingServerRequest<Oteldemo_AdRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_AdResponse>
    }

    /// Service protocol for the "oteldemo.AdService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_AdService.StreamingServiceProtocol {
        /// Handle the "GetAds" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_AdRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_AdResponse` message.
        func getAds(
            request: GRPCCore.ServerRequest<Oteldemo_AdRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_AdResponse>
    }

    /// Simple service protocol for the "oteldemo.AdService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_AdService.ServiceProtocol {
        /// Handle the "GetAds" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_AdRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_AdResponse` to respond with.
        func getAds(
            request: Oteldemo_AdRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_AdResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_AdService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_AdService.Method.GetAds.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_AdRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_AdResponse>(),
            handler: { request, context in
                try await self.getAds(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_AdService.ServiceProtocol {
    internal func getAds(
        request: GRPCCore.StreamingServerRequest<Oteldemo_AdRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_AdResponse> {
        let response = try await self.getAds(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_AdService.SimpleServiceProtocol {
    internal func getAds(
        request: GRPCCore.ServerRequest<Oteldemo_AdRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_AdResponse> {
        return GRPCCore.ServerResponse<Oteldemo_AdResponse>(
            message: try await self.getAds(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: - oteldemo.FeatureFlagService

/// Namespace containing generated types for the "oteldemo.FeatureFlagService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum Oteldemo_FeatureFlagService {
    /// Service descriptor for the "oteldemo.FeatureFlagService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "GetFlag" metadata.
        internal enum GetFlag {
            /// Request type for "GetFlag".
            internal typealias Input = Oteldemo_GetFlagRequest
            /// Response type for "GetFlag".
            internal typealias Output = Oteldemo_GetFlagResponse
            /// Descriptor for "GetFlag".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService"),
                method: "GetFlag"
            )
        }
        /// Namespace for "CreateFlag" metadata.
        internal enum CreateFlag {
            /// Request type for "CreateFlag".
            internal typealias Input = Oteldemo_CreateFlagRequest
            /// Response type for "CreateFlag".
            internal typealias Output = Oteldemo_CreateFlagResponse
            /// Descriptor for "CreateFlag".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService"),
                method: "CreateFlag"
            )
        }
        /// Namespace for "UpdateFlag" metadata.
        internal enum UpdateFlag {
            /// Request type for "UpdateFlag".
            internal typealias Input = Oteldemo_UpdateFlagRequest
            /// Response type for "UpdateFlag".
            internal typealias Output = Oteldemo_UpdateFlagResponse
            /// Descriptor for "UpdateFlag".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService"),
                method: "UpdateFlag"
            )
        }
        /// Namespace for "ListFlags" metadata.
        internal enum ListFlags {
            /// Request type for "ListFlags".
            internal typealias Input = Oteldemo_ListFlagsRequest
            /// Response type for "ListFlags".
            internal typealias Output = Oteldemo_ListFlagsResponse
            /// Descriptor for "ListFlags".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService"),
                method: "ListFlags"
            )
        }
        /// Namespace for "DeleteFlag" metadata.
        internal enum DeleteFlag {
            /// Request type for "DeleteFlag".
            internal typealias Input = Oteldemo_DeleteFlagRequest
            /// Response type for "DeleteFlag".
            internal typealias Output = Oteldemo_DeleteFlagResponse
            /// Descriptor for "DeleteFlag".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService"),
                method: "DeleteFlag"
            )
        }
        /// Descriptors for all methods in the "oteldemo.FeatureFlagService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetFlag.descriptor,
            CreateFlag.descriptor,
            UpdateFlag.descriptor,
            ListFlags.descriptor,
            DeleteFlag.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "oteldemo.FeatureFlagService" service.
    internal static let oteldemo_FeatureFlagService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "oteldemo.FeatureFlagService")
}

// MARK: oteldemo.FeatureFlagService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_FeatureFlagService {
    /// Streaming variant of the service protocol for the "oteldemo.FeatureFlagService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "GetFlag" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_GetFlagRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_GetFlagResponse` messages.
        func getFlag(
            request: GRPCCore.StreamingServerRequest<Oteldemo_GetFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_GetFlagResponse>

        /// Handle the "CreateFlag" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_CreateFlagRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_CreateFlagResponse` messages.
        func createFlag(
            request: GRPCCore.StreamingServerRequest<Oteldemo_CreateFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_CreateFlagResponse>

        /// Handle the "UpdateFlag" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_UpdateFlagRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_UpdateFlagResponse` messages.
        func updateFlag(
            request: GRPCCore.StreamingServerRequest<Oteldemo_UpdateFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_UpdateFlagResponse>

        /// Handle the "ListFlags" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_ListFlagsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_ListFlagsResponse` messages.
        func listFlags(
            request: GRPCCore.StreamingServerRequest<Oteldemo_ListFlagsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ListFlagsResponse>

        /// Handle the "DeleteFlag" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Oteldemo_DeleteFlagRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Oteldemo_DeleteFlagResponse` messages.
        func deleteFlag(
            request: GRPCCore.StreamingServerRequest<Oteldemo_DeleteFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_DeleteFlagResponse>
    }

    /// Service protocol for the "oteldemo.FeatureFlagService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Oteldemo_FeatureFlagService.StreamingServiceProtocol {
        /// Handle the "GetFlag" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_GetFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_GetFlagResponse` message.
        func getFlag(
            request: GRPCCore.ServerRequest<Oteldemo_GetFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_GetFlagResponse>

        /// Handle the "CreateFlag" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_CreateFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_CreateFlagResponse` message.
        func createFlag(
            request: GRPCCore.ServerRequest<Oteldemo_CreateFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_CreateFlagResponse>

        /// Handle the "UpdateFlag" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_UpdateFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_UpdateFlagResponse` message.
        func updateFlag(
            request: GRPCCore.ServerRequest<Oteldemo_UpdateFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_UpdateFlagResponse>

        /// Handle the "ListFlags" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_ListFlagsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_ListFlagsResponse` message.
        func listFlags(
            request: GRPCCore.ServerRequest<Oteldemo_ListFlagsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_ListFlagsResponse>

        /// Handle the "DeleteFlag" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Oteldemo_DeleteFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Oteldemo_DeleteFlagResponse` message.
        func deleteFlag(
            request: GRPCCore.ServerRequest<Oteldemo_DeleteFlagRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Oteldemo_DeleteFlagResponse>
    }

    /// Simple service protocol for the "oteldemo.FeatureFlagService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Oteldemo_FeatureFlagService.ServiceProtocol {
        /// Handle the "GetFlag" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_GetFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_GetFlagResponse` to respond with.
        func getFlag(
            request: Oteldemo_GetFlagRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_GetFlagResponse

        /// Handle the "CreateFlag" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_CreateFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_CreateFlagResponse` to respond with.
        func createFlag(
            request: Oteldemo_CreateFlagRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_CreateFlagResponse

        /// Handle the "UpdateFlag" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_UpdateFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_UpdateFlagResponse` to respond with.
        func updateFlag(
            request: Oteldemo_UpdateFlagRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_UpdateFlagResponse

        /// Handle the "ListFlags" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_ListFlagsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_ListFlagsResponse` to respond with.
        func listFlags(
            request: Oteldemo_ListFlagsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_ListFlagsResponse

        /// Handle the "DeleteFlag" method.
        ///
        /// - Parameters:
        ///   - request: A `Oteldemo_DeleteFlagRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Oteldemo_DeleteFlagResponse` to respond with.
        func deleteFlag(
            request: Oteldemo_DeleteFlagRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Oteldemo_DeleteFlagResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_FeatureFlagService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Oteldemo_FeatureFlagService.Method.GetFlag.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_GetFlagRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_GetFlagResponse>(),
            handler: { request, context in
                try await self.getFlag(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_FeatureFlagService.Method.CreateFlag.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_CreateFlagRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_CreateFlagResponse>(),
            handler: { request, context in
                try await self.createFlag(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_FeatureFlagService.Method.UpdateFlag.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_UpdateFlagRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_UpdateFlagResponse>(),
            handler: { request, context in
                try await self.updateFlag(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_FeatureFlagService.Method.ListFlags.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_ListFlagsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_ListFlagsResponse>(),
            handler: { request, context in
                try await self.listFlags(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Oteldemo_FeatureFlagService.Method.DeleteFlag.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Oteldemo_DeleteFlagRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Oteldemo_DeleteFlagResponse>(),
            handler: { request, context in
                try await self.deleteFlag(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_FeatureFlagService.ServiceProtocol {
    internal func getFlag(
        request: GRPCCore.StreamingServerRequest<Oteldemo_GetFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_GetFlagResponse> {
        let response = try await self.getFlag(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func createFlag(
        request: GRPCCore.StreamingServerRequest<Oteldemo_CreateFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_CreateFlagResponse> {
        let response = try await self.createFlag(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func updateFlag(
        request: GRPCCore.StreamingServerRequest<Oteldemo_UpdateFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_UpdateFlagResponse> {
        let response = try await self.updateFlag(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func listFlags(
        request: GRPCCore.StreamingServerRequest<Oteldemo_ListFlagsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_ListFlagsResponse> {
        let response = try await self.listFlags(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func deleteFlag(
        request: GRPCCore.StreamingServerRequest<Oteldemo_DeleteFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Oteldemo_DeleteFlagResponse> {
        let response = try await self.deleteFlag(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Oteldemo_FeatureFlagService.SimpleServiceProtocol {
    internal func getFlag(
        request: GRPCCore.ServerRequest<Oteldemo_GetFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_GetFlagResponse> {
        return GRPCCore.ServerResponse<Oteldemo_GetFlagResponse>(
            message: try await self.getFlag(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func createFlag(
        request: GRPCCore.ServerRequest<Oteldemo_CreateFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_CreateFlagResponse> {
        return GRPCCore.ServerResponse<Oteldemo_CreateFlagResponse>(
            message: try await self.createFlag(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func updateFlag(
        request: GRPCCore.ServerRequest<Oteldemo_UpdateFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_UpdateFlagResponse> {
        return GRPCCore.ServerResponse<Oteldemo_UpdateFlagResponse>(
            message: try await self.updateFlag(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func listFlags(
        request: GRPCCore.ServerRequest<Oteldemo_ListFlagsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_ListFlagsResponse> {
        return GRPCCore.ServerResponse<Oteldemo_ListFlagsResponse>(
            message: try await self.listFlags(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func deleteFlag(
        request: GRPCCore.ServerRequest<Oteldemo_DeleteFlagRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Oteldemo_DeleteFlagResponse> {
        return GRPCCore.ServerResponse<Oteldemo_DeleteFlagResponse>(
            message: try await self.deleteFlag(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}